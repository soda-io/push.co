// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var BigScreenWidgetsManager, CSS3Transform, DegTouch, DragParent, DragSelf, FreeMove, HorizontalSlidingContent, ShiftBillet, SlidingContent, SmartMove, Touchable, Updater, WidgetsManager, abs, appVer, bounceX, bounceY, getXYZTranslate, isIpad, isIphone, isiOS, max, min, round, t;
    min = Math.min, max = Math.max, round = Math.round, abs = Math.abs;
    appVer = navigator.appVersion;
    isIphone = /iPhone/g.test(navigator.userAgent) || /iPod/g.test(navigator.userAgent);
    isIpad = /iPad/g.test(navigator.userAgent);
    isiOS = /ipad/gi.test(appVer) || /iphone/gi.test(appVer);
    CSS3Transform = /firefox/gi.test(appVer) ? "MozTransform" : /webkit/gi.test(appVer) ? "WebkitTransform" : "transform";
    bounceX = function(elem, dx, x0, t) {
      if (x0 == null) {
        x0 = 0;
      }
      if (t == null) {
        t = [500, 200, 300];
      }
      return $(elem).animate({
        translate3d: "" + x0 + ", 0, 0"
      }, t[0], "linear", function() {
        return $(elem).animate({
          translate3d: "" + (x0 + dx) + "px, 0, 0"
        }, t[1], "linear", function() {
          return $(elem).animate({
            translate3d: "" + x0 + ", 0, 0"
          }, t[2], "linear");
        });
      });
    };
    bounceY = function(elem, dy, y0, t) {
      if (y0 == null) {
        y0 = 0;
      }
      if (t == null) {
        t = [500, 200, 300];
      }
      return $(elem).animate({
        translate3d: "0, " + y0 + "px, 0"
      }, t[0], "linear", function() {
        return $(elem).animate({
          translate3d: "0, " + (y0 + dy) + "px, 0"
        }, t[1], "linear", function() {
          return $(elem).animate({
            translate3d: "0, " + y0 + "px, 0"
          }, t[2], "linear");
        });
      });
    };
    Touchable = (function() {
      function Touchable(selector, opts) {
        var k, v, _ref;
        this.selector = selector;
        if (opts == null) {
          opts = {};
        }
        this.pos0 = this.pos1 = null;
        if (opts.pubsub) {
          this.pubsub = opts.pubsub;
        }
        if (opts.checkTouch) {
          this._checkTouch = opts.checkTouch;
        }
        if (opts.onMove) {
          this._onMove = opts.onMove;
        }
        if (opts.onStopMove) {
          this._onStopMove = opts.onStopMove;
        }
        if (opts.onStartMove) {
          this._onStartMove = opts.onStartMove;
        }
        if (opts.onHold) {
          this._onHold = opts.onHold;
        }
        this._handlers = opts.handlers || {};
        this._onResize = opts.onResize != null ? opts.onResize : function() {};
        if (opts.data) {
          _ref = opts.data;
          for (k in _ref) {
            v = _ref[k];
            this[k] = v;
          }
        }
        $(this.selector).on("touchstart mousedown", (function(_this) {
          return function(e) {
            _this._movingFlag = true;
            _this.pos0 = _this._getPt(e);
            return _this._onStartMove.call(_this, e, _this.pos0.x, _this.pos0.y);
          };
        })(this));
        this._setMoveHandler();
        $(this.selector).on("touchend touchcancel mouseup mouseleave", (function(_this) {
          return function() {
            _this._movingFlag = false;
            return _this._onStopMove();
          };
        })(this));
        $(window).on("orientationchange resize", (function(_this) {
          return function() {
            return _this._onResize();
          };
        })(this));
        this._onResize();
        if (opts.pubsub) {
          this.pubsub = opts.pubsub;
        }
      }

      Touchable.prototype._setMoveHandler = function() {
        return $(this.selector).on("touchmove mousemove", (function(_this) {
          return function(e) {
            var dx, dy;
            if (_this._movingFlag) {
              if (e.touches && e.touches.length > 1) {
                return;
              }
              e.stopPropagation();
              e.preventDefault();
              _this.pos1 = _this._getPt(e);
              dx = _this.pos0.x - _this.pos1.x;
              dy = _this.pos0.y - _this.pos1.y;
              _this._checkTouch.call(_this, e, dx, dy);
              return _this._onMove.call(_this, dx, dy);
            }
          };
        })(this));
      };

      Touchable.prototype._getPt = function(e) {
        if (e.touches != null) {
          return {
            x: e.touches[0].pageX,
            y: e.touches[0].pageY
          };
        } else {
          return {
            x: e.pageX,
            y: e.pageY
          };
        }
      };

      Touchable.prototype._checkTouch = function(e, dx, dy) {
        if ("function" === typeof this._handlers.checkTouch) {
          return this._handlers.checkTouch.call(this, e, dx, dy);
        }
      };

      Touchable.prototype._onStartMove = function(e, x, y) {
        if ("function" === typeof this._handlers.onStartMove) {
          return this._handlers.onStartMove.call(this, e, x, y);
        }
      };

      Touchable.prototype._onMove = function(dx, dy) {
        if ("function" === typeof this._handlers.onMove) {
          return this._handlers.onMove.call(this, dx, dy);
        }
      };

      Touchable.prototype._onStopMove = function() {
        if ("function" === typeof this._handlers.onStopMove) {
          return this._handlers.onStopMove.call(this);
        }
      };

      Touchable.prototype._onResize = function() {
        if ("function" === typeof this._handlers.onResize) {
          return this._handlers.onResize.call(this);
        }
      };

      Touchable.prototype._onHold = function() {
        if ("function" === typeof this._handlers.onHold) {
          return this._handlers.onHold.call(this);
        }
      };

      return Touchable;

    })();
    ShiftBillet = (function(_super) {
      __extends(ShiftBillet, _super);

      function ShiftBillet(selector, opts) {
        this.selector = selector;
        if (opts == null) {
          opts = {};
        }
        ShiftBillet.__super__.constructor.call(this, selector, opts);
        this._animTime = opts.animTime || 320;
        this._inertiaTime = opts.inertiaTime || this._animTime;
        this.name = opts.name;
        this.actions = opts.actions;
        this.callback = opts.callback || function() {};
        this._start_offset = opts.startOffset || 30;
      }

      ShiftBillet.prototype._setMoveHandler = function() {
        return $(this.selector).on("touchmove mousemove", (function(_this) {
          return function(e) {
            var dx, dy;
            if (_this._movingFlag) {
              if (e.touches && e.touches.length > 1) {
                return;
              }
              _this.pos1 = _this._getPt(e);
              dx = _this.pos0.x - _this.pos1.x;
              dy = _this.pos0.y - _this.pos1.y;
              if (abs(dx) > abs(dy) && abs(dx) > 10) {
                e.preventDefault();
                e.stopPropagation();
                _this._checkTouch.call(_this, e, dx, dy);
                return _this._onMove.call(_this, dx, dy);
              }
            }
          };
        })(this));
      };

      ShiftBillet.prototype._onStartMove = function(e) {
        var _ref, _z0;
        this._dx = this._dy = 0;
        this._isMoving = true;
        if (!this._locked) {
          _ref = getXYZTranslate($(this.selector)), this._x0 = _ref[0], this._y0 = _ref[1], _z0 = _ref[2];
        }
        if (this.pos0.x < 70) {
          this._x0 += this._start_offset;
          $(this.selector).animate({
            translate3d: "" + this._x0 + "px, " + this._y0 + "px, 0"
          }, 100, "ease", (function(_this) {
            return function() {
              if (!_this._isMoving) {
                return $(_this.selector).animate({
                  translate3d: "0, 0, 0"
                }, 50);
              }
            };
          })(this));
        } else {
          $(this.selector).animate({
            translate3d: "" + this._x0 + "px, " + this._y0 + "px, 0"
          }, 0);
        }
        this._time = Date.now();
        this._w0 = $(this.selector).width();
        return ShiftBillet.__super__._onStartMove.call(this, e, this._x0, this._y0);
      };

      ShiftBillet.prototype._onMove = function(dx, dy) {
        var x;
        this._dx = -dx;
        x = this._x0 + this._dx;
        $(this.selector).animate({
          translate3d: "" + (round(x)) + "px, " + this._y0 + "px, 0"
        }, 0);
        return ShiftBillet.__super__._onMove.call(this, dx, dy);
      };

      ShiftBillet.prototype._onStopMove = function() {
        var deltaOff, deltaTime, x, y, z, _ref;
        this._isMoving = false;
        _ref = getXYZTranslate($(this.selector)), x = _ref[0], y = _ref[1], z = _ref[2];
        this.lastX = x;
        if (x > 0) {
          x = 0;
        } else if (x < -this._w0) {
          x = -this._w0;
        } else {
          deltaTime = Date.now() - this._time;
          if (deltaTime < this._inertiaTime) {
            deltaOff = this._dx / (deltaTime / this._inertiaTime);
            x = this._x0 + this._dx + deltaOff * this._moveGain;
          }
          if (x > 0) {
            x = 0;
          } else if (x < -this._w0) {
            x = -this._w0;
          }
        }
        x = round(x);
        if (x < 0) {
          x = 0;
        }
        $(this.selector).animate({
          translate3d: "" + x + "px, " + this._y0 + "px, 0"
        }, this._animTime, "ease-out");
        this._dx = this._dy = 0;
        this.callback.call(this);
        return ShiftBillet.__super__._onStopMove.call(this);
      };

      return ShiftBillet;

    })(Touchable);
    DragParent = (function(_super) {
      __extends(DragParent, _super);

      function DragParent(selector, opts) {
        this.selector = selector;
        if (opts == null) {
          opts = {};
        }
        this.parent = opts.parent;
        this.num = opts.num;
        DragParent.__super__.constructor.call(this, this.selector, opts);
      }

      DragParent.prototype._onStartMove = function(e) {
        var _ref, _z0;
        _ref = getXYZTranslate($(this.parent)), this._x0 = _ref[0], this._y0 = _ref[1], _z0 = _ref[2];
        return $(this.parent).animate({
          translate3d: "" + this._x0 + "px, " + this._y0 + "px, 0"
        }, 0);
      };

      DragParent.prototype._onMove = function(dx, dy) {
        var x;
        this._dx = -dx;
        x = this._x0 + this._dx;
        $(this.parent).animate({
          translate3d: "" + (round(x)) + "px, " + this._y0 + "px, 0"
        }, 0);
        return DragParent.__super__._onMove.call(this, dx, dy);
      };

      return DragParent;

    })(Touchable);
    DragSelf = (function(_super) {
      __extends(DragSelf, _super);

      function DragSelf(selector, opts) {
        this.selector = selector;
        if (opts == null) {
          opts = {};
        }
        this.parent = opts.parent;
        this.num = opts.num;
        this._capture = false;
        this._treshold = 40;
        DragSelf.__super__.constructor.call(this, this.selector, opts);
      }

      DragSelf.prototype._setMoveHandler = function() {
        return $(this.selector).on("touchmove mousemove", (function(_this) {
          return function(e) {
            var dx, dy;
            console.log("move = " + _this._movingFlag + "\t cap = " + _this._capture);
            if (_this._movingFlag && _this._capture) {
              if (e.touches && e.touches.length > 1) {
                return;
              }
              e.stopPropagation();
              e.preventDefault();
              _this.pos1 = _this._getPt(e);
              dx = _this.pos0.x - _this.pos1.x;
              dy = _this.pos0.y - _this.pos1.y;
              _this._checkTouch.call(_this, e, dx, dy);
              return _this._onMove.call(_this, dx, dy);
            }
          };
        })(this));
      };

      DragSelf.prototype._onStartMove = function(e) {
        var _ref, _z0;
        this._elemWidth = $(this.selector).offset().width;
        if (this.pos0.x < this._treshold || (this._elemWidth - this.pos0.x) < this._treshold) {
          this._capture = true;
        } else {
          this._capture = false;
        }
        _ref = getXYZTranslate($(this.selector)), this._x0 = _ref[0], this._y0 = _ref[1], _z0 = _ref[2];
        return $(this.selector).animate({
          translate3d: "" + this._x0 + "px, " + this._y0 + "px, 0"
        }, 0);
      };

      DragSelf.prototype._onMove = function(dx, dy) {
        var x;
        this._dx = -dx;
        x = this._x0 + this._dx;
        $(this.selector).animate({
          translate3d: "" + (round(x)) + "px, " + this._y0 + "px, 0"
        }, 0);
        return DragSelf.__super__._onMove.call(this, dx, dy);
      };

      DragSelf.prototype._onStopMove = function() {
        console.log("stop move " + this.num);
        return DragSelf.__super__._onStopMove.call(this);
      };

      return DragSelf;

    })(Touchable);
    WidgetsManager = (function() {
      function WidgetsManager(parentContent, opts) {
        this.parentContent = parentContent;
        if (opts == null) {
          opts = {};
        }
        this.pageSelector = opts.page;
        this.jabSelector = opts.jab || null;
        this._firstPageOffset = opts.firstPageOffset || window.innerWidth - 60;
        this._animTime = opts.animationTime || 700;
        this._animName = opts.animationName || "ease-in-out";
        this._bottomZIndex = opts.bgZIndex || 1;
        this._zIndexFg = this._bottomZIndex + 50;
        this._zIndexBg = this._zIndexFg - 1;
        this.init();
        this._subclassess = [];
        this._lastDx = 0;
        this._lastStop = -1;
      }

      WidgetsManager.prototype.init = function() {
        var el, i, obj, _i, _len, _ref, _results;
        this._w = window.innerWidth;
        this._elements = [];
        this._lastPosShifted = false;
        obj = this;
        $(this.parentContent).find(this.pageSelector).forEach((function(_this) {
          return function(el, n) {
            var jab;
            if (_this.jabSelector) {
              jab = $(el).find(_this.jabSelector);
              $(jab).off();
              new DragParent(jab, {
                parent: el,
                num: n,
                handlers: {
                  onMove: function(dx) {
                    return obj._handleMove(this.num, dx);
                  },
                  onStopMove: function() {
                    return obj._handleStop(this.num);
                  }
                }
              });
            } else {
              new DragSelf(el, {
                num: n,
                handlers: {
                  onStartMove: function() {
                    return obj._handleStartMove(this.num);
                  },
                  onMove: function(dx) {
                    return obj._handleMove(this.num, dx);
                  },
                  onStopMove: function() {
                    return obj._handleStop(this.num);
                  }
                }
              });
            }
            $(el).css({
              position: "absolute",
              top: 0,
              width: "" + _this._w + "px",
              left: 0,
              "z-index": _this._zIndexFg
            });
            $(el).animate({
              translate3d: "-" + _this._w + "px, 0, 0"
            }, 0);
            return _this._elements.push(el);
          };
        })(this));
        _ref = this._elements;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          el = _ref[i];
          if (0 === i) {
            _results.push($(el).animate({
              translate3d: "0, 0, 0"
            }, 0));
          } else {
            _results.push($(el).animate({
              translate3d: "" + this._w + "px, 0, 0"
            }, 0));
          }
        }
        return _results;
      };

      WidgetsManager.prototype._debug = function() {
        var e, i, _i, _len, _ref, _results;
        console.log("W = " + this._w + "px");
        _ref = this._elements;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          e = _ref[i];
          _results.push(console.log("" + i + " = " + (getXYZTranslate($(e)))));
        }
        return _results;
      };

      WidgetsManager.prototype._handleStartMove = function(num) {
        var el, n, _i, _len, _ref;
        _ref = this._elements;
        for (n = _i = 0, _len = _ref.length; _i < _len; n = ++_i) {
          el = _ref[n];
          if (n === num) {
            $(el).css("z-index", this._zIndexFg);
          } else {
            $(el).css("z-index", this._zIndexBg);
          }
        }
        $(this._elements[num - 1]).animate({
          translate3d: "-" + this._w + "px, 0, 0"
        }, 0);
        return $(this._elements[num + 1]).animate({
          translate3d: "" + this._w + "px, 0, 0"
        }, 0);
      };

      WidgetsManager.prototype._handleMove = function(num, dx) {
        this._lastDx = dx;
        $(this._elements[num + 1]).animate({
          translate3d: "" + (this._w - dx) + "px, 0, 0"
        }, 0);
        return $(this._elements[num - 1]).animate({
          translate3d: "" + (-this._w - dx) + "px, 0, 0"
        }, 0);
      };

      WidgetsManager.prototype._handleStop = function(num) {
        var now, _lastDx;
        now = Date.now();
        if (now - this._lastStop > 300) {
          this._lastStop = now;
        } else {
          this._lastDx = 0;
          return;
        }
        _lastDx = this._lastDx;
        this._lastDx = 0;
        if (40 < _lastDx) {
          if (num === 0 && this._lastPosShifted) {
            this._lastPosShifted = false;
            $(this._elements[num]).animate({
              translate3d: "0, 0, 0"
            }, this._animTime, this._animName);
            $(this._elements[num + 1]).animate({
              translate3d: "" + this._w + "px, 0, 0"
            }, 0);
          } else if (num === this._elements.length - 1) {
            $(this._elements[num]).animate({
              translate3d: "-" + this._w + "px, 0, 0"
            }, this._animTime, this._animName);
            $(this._elements[0]).css({
              "z-index": this._bottomZIndex
            });
            $(this._elements[0]).animate({
              translate3d: "" + this._w + "px, 0, 0"
            }, 0);
            setTimeout(((function(_this) {
              return function() {
                var e, i, _i, _len, _ref;
                $(_this._elements[0]).css({
                  "z-index": _this._zIndexFg
                });
                $(_this._elements[0]).animate({
                  translate3d: "" + _this._firstPageOffset + "px, 0, 0"
                }, _this._animTime / 2, _this._animName);
                _ref = _this._elements;
                for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
                  e = _ref[i];
                  if (0 === i) {
                    continue;
                  }
                  $(e).css({
                    "z-index": _this._bottomZIndex
                  });
                  $(e).animate({
                    translate3d: "" + _this._w + "px, 0, 0"
                  }, 0);
                }
                return setTimeout((function() {
                  var _j, _len1, _ref1, _results;
                  _ref1 = _this._elements;
                  _results = [];
                  for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
                    e = _ref1[i];
                    if (0 === i) {
                      continue;
                    }
                    $(e).css({
                      "z-index": _this._zIndexBg
                    });
                    _results.push($(e).animate({
                      translate3d: "" + _this._w + "px, 0, 0"
                    }, 0));
                  }
                  return _results;
                }), 50);
              };
            })(this)), 50);
            return this._lastPosShifted = true;
          } else {
            if (this._lastPosShifted) {
              $(this._elements[num]).animate({
                translate3d: "0, 0, 0"
              }, this._animTime, this._animName);
            } else {
              $(this._elements[num + 1]).animate({
                translate3d: "0, 0, 0"
              }, this._animTime, this._animName);
              $(this._elements[num]).animate({
                translate3d: "-" + this._w + "px, 0, 0"
              }, this._animTime, this._animName);
            }
          }
        } else if (-40 > _lastDx) {
          if (num === 0) {
            $(this._elements[num]).animate({
              translate3d: "" + this._firstPageOffset + "px, 0, 0"
            }, this._animTime, this._animName);
            $(this._elements[num + 1]).animate({
              translate3d: "" + this._w + "px, 0, 0"
            }, this._animTime, this._animName);
            return this._lastPosShifted = true;
          } else {
            $(this._elements[num - 1]).animate({
              translate3d: "0, 0, 0"
            }, this._animTime, this._animName);
            $(this._elements[num]).animate({
              translate3d: "" + this._w + "px, 0, 0"
            }, this._animTime, this._animName);
          }
        } else {
          $(this._elements[num]).animate({
            translate3d: "0, 0, 0"
          }, this._animTime, this._animName);
          $(this._elements[num + 1]).animate({
            translate3d: "" + this._w + "px, 0, 0"
          }, this._animTime, this._animName);
          $(this._elements[num - 1]).animate({
            translate3d: "-" + this._w + "px, 0, 0"
          }, this._animTime, this._animName);
        }
        return this._lastPosShifted = false;
      };

      return WidgetsManager;

    })();
    BigScreenWidgetsManager = (function() {
      function BigScreenWidgetsManager(parentContent, opts) {
        this.parentContent = parentContent;
        if (opts == null) {
          opts = {};
        }
        this.pageSelector = opts.page;
        this._animTime = opts.animationTime || 700;
        opts.bgZIndex || (opts.bgZIndex = 100);
        this._zIndexFg = opts.bgZIndex + 100;
        this._zIndexBg = opts.bgZIndex;
        this._pageSize = opts.pageSize || {
          w: 320,
          h: 568
        };
        this._topOffset = opts.topOffset || 0;
        this.init();
      }

      BigScreenWidgetsManager.prototype.setupHandlers = function() {
        $(this.parentContent).on("swipeLeft", (function(_this) {
          return function() {
            return _this.placePages(1);
          };
        })(this));
        $(this.parentContent).on("swipeRight", (function(_this) {
          return function() {
            return _this.placePages(-1);
          };
        })(this));
        return $(this.parentContent).on("dblclick", (function(_this) {
          return function() {
            return _this.placePages(1);
          };
        })(this));
      };

      BigScreenWidgetsManager.prototype.destroy = function() {
        $(this.parentContent).off("swipeLeft", (function(_this) {
          return function() {
            return _this.placePages(1);
          };
        })(this));
        $(this.parentContent).off("swipeRight", (function(_this) {
          return function() {
            return _this.placePages(-1);
          };
        })(this));
        return $(this.parentContent).off("dblclick", (function(_this) {
          return function() {
            return _this.placePages(1);
          };
        })(this));
      };

      BigScreenWidgetsManager.prototype.init = function() {
        var i, lastIndex, obj, scale, styl, _i, _ref;
        this.setupHandlers();
        this._centerScreen = {
          x: window.innerWidth / 2,
          y: window.innerHeight / 2
        };
        console.log("cs = " + (JSON.stringify(this._centerScreen, null, 2)));
        this._elements = [];
        this._translations = [];
        obj = this;
        $(this.parentContent).find(this.pageSelector).forEach((function(_this) {
          return function(el, n) {
            var styles;
            styles = {
              position: "absolute",
              top: "" + (max(0, _this._centerScreen.y - _this._pageSize.h / 2)) + "px",
              left: "" + (max(0, _this._centerScreen.x - _this._pageSize.w / 2)) + "px",
              "z-index": _this._zIndexFg,
              width: _this._pageSize.w,
              height: _this._pageSize.h
            };
            $(el).css(styles);
            console.log("styles = " + (JSON.stringify(styles, null, 2)));
            return _this._elements.push(el);
          };
        })(this));
        if (0 === this._elements.length % 2) {
          this._orders = [1, 2, 3, 4];
        } else {
          this._translations = ["0, 0, 0"];
          this._pageStyles = [
            {
              "-webkit-filter": "blur(0)",
              scale3d: "1, 1, 1",
              "z-index": this._zIndexFg
            }
          ];
          lastIndex = parseInt(this._elements.length / 2);
          this._orders = [lastIndex];
          for (i = _i = 1, _ref = this._elements.length / 2; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
            this._orders.push(lastIndex + i);
            this._orders.push(lastIndex - i);
            this._translations.unshift("-" + (this._pageSize.w * 2 * i / 3) + "px, " + this._topOffset + "px, 0");
            this._translations.push("" + (this._pageSize.w * 2 * i / 3) + "px, " + this._topOffset + "px, 0");
            scale = Math.pow(0.8, i);
            styl = {
              "-webkit-filter": "blur(3px)",
              scale3d: "" + scale + ", " + scale + ", " + scale,
              "z-index": this._zIndexFg - i
            };
            this._pageStyles.push(styl);
            this._pageStyles.unshift(styl);
          }
        }
        return this.placePages();
      };

      BigScreenWidgetsManager.prototype.placePages = function(rot, animTime) {
        var e, i, j, style, _i, _len, _ref, _results;
        if (rot == null) {
          rot = 0;
        }
        if (animTime == null) {
          animTime = null;
        }
        if (rot < 0) {
          while (rot < 0) {
            rot++;
            e = this._elements.pop();
            this._elements.unshift(e);
          }
        } else if (rot > 0) {
          while (rot > 0) {
            rot--;
            e = this._elements.shift();
            this._elements.push(e);
          }
        }
        _ref = this._orders;
        _results = [];
        for (j = _i = 0, _len = _ref.length; _i < _len; j = ++_i) {
          i = _ref[j];
          console.log("" + j + ": " + i + " (" + this._pageStyles[i]['z-index'] + ")");
          e = this._elements[i];
          style = this._pageStyles[i];
          style.translate3d = this._translations[i];
          $(e).css({
            "z-index": this._pageStyles[i]['z-index']
          });
          _results.push($(e).animate(style, animTime || this._animTime, "ease-in-out"));
        }
        return _results;
      };

      return BigScreenWidgetsManager;

    })();
    FreeMove = (function(_super) {
      __extends(FreeMove, _super);

      function FreeMove(selector, opts) {
        this.selector = selector;
        if (opts == null) {
          opts = {};
        }
        FreeMove.__super__.constructor.call(this, selector, opts);
        this._lockLeft = !!opts.lockLeft;
        this._lockRight = !!opts.lockRight;
        this._maxScreenWidth = opts.maxWidth || null;
        this._moveGain = opts.moveGain || 1;
        this._animTime = 320;
        this._inertiaTime = opts.inertiaTime || this._animTime;
        this.name = opts.name;
        this._stopCondition = opts.stopCondition || function() {
          return false;
        };
      }

      FreeMove.prototype._onStartMove = function(e) {
        var w0, _ref, _z0;
        this._locked = $(this.selector).data("lock") === "yes";
        if (!this._locked) {
          this._locked = $(e.currentTarget).data("lock") === "yes";
        }
        this._dx = this._dy = 0;
        this._isMoving = true;
        if (!this._locked) {
          _ref = getXYZTranslate($(this.selector)), this._x0 = _ref[0], this._y0 = _ref[1], _z0 = _ref[2];
          if (this.pubsub) {
            this.pubsub.trigger("start-move:" + this.name, [this._x0, this._y0]);
          }
          $(this.selector).animate({
            translate3d: "" + this._x0 + "px, " + this._y0 + "px, 0"
          }, 0);
          this._time = Date.now();
          w0 = window.innerWidth;
          this._width = $(this.selector).offset().width;
          this._w0 = this._width - w0;
          return FreeMove.__super__._onStartMove.call(this, e, this._x0, this._y0);
        }
      };

      FreeMove.prototype._onMove = function(dx, dy) {
        var x;
        if (!this._locked) {
          this._dx = -dx;
          x = this._x0 + this._dx;
          if ((this._lockLeft && x > 0) || (this._lockRight && x < -this._width)) {
            return;
          }
          if (this.pubsub) {
            this.pubsub.trigger("move:" + this.name, [this._dx, this._dy]);
          }
          $(this.selector).animate({
            translate3d: "" + (round(x)) + "px, " + this._y0 + "px, 0"
          }, 0);
          return FreeMove.__super__._onMove.call(this, dx, dy);
        }
      };

      FreeMove.prototype._onStopMove = function() {
        var deltaOff, deltaTime, now, sign, x, y, z, _ref;
        this._isMoving = false;
        if (!this._locked && this._dx !== 0) {
          now = Date.now();
          _ref = getXYZTranslate($(this.selector)), x = _ref[0], y = _ref[1], z = _ref[2];
          if (x > 0) {
            x = 0;
          } else if (x < -this._w0) {
            x = -this._w0;
          } else {
            deltaTime = now - this._time;
            if (this._moveFixed) {
              sign = 1;
              if (deltaTime < this._inertiaTime) {
                if (this._dx > 0) {
                  x = this._x0 + sign * this._moveFixedValue;
                } else {
                  x = this._x0 - sign * this._moveFixedValue;
                }
              } else {
                if (abs(this._dx) > this._moveFixedValue / 2) {
                  x = this._x0 - this._moveFixedValue;
                } else {
                  x = this._x0 + this._moveFixedValue;
                }
              }
            } else {
              if (deltaTime < this._inertiaTime) {
                deltaOff = this._dx / (deltaTime / this._inertiaTime);
                x = this._x0 + this._dx + deltaOff * this._moveGain;
              }
            }
            if (x > 0) {
              x = 0;
            } else if (x < -this._w0) {
              x = -this._w0;
            }
          }
          x = round(x);
          if (this.pubsub) {
            this.pubsub.trigger("stop-move:" + this.name, [this._dx, this._dy]);
          }
          if (!this._stopCondition(this._dx, this._dy)) {
            $(this.selector).animate({
              translate3d: "" + x + "px, " + this._y0 + "px, 0"
            }, this._animTime, "ease-out");
          }
          this._dx = this._dy = 0;
          return FreeMove.__super__._onStopMove.call(this);
        }
      };

      return FreeMove;

    })(Touchable);
    SmartMove = (function(_super) {
      __extends(SmartMove, _super);

      function SmartMove(selector, opts) {
        this.selector = selector;
        if (opts == null) {
          opts = {};
        }
        SmartMove.__super__.constructor.call(this, selector, opts);
        this._direction = null;
        this._x_sence = 30;
        this._y_sence = 50;
        this._maxLeftOffset = opts.maxLeftOffset || .5;
        this._maxRightOffset = opts.maxRightOffset || .5;
        this._maxTopOffset = opts.maxTopOffset || .2;
        this._maxBottomOffset = opts.maxBottomOffset || .2;
      }

      SmartMove.prototype._onStartMove = function(e) {
        var w0, x, y, _ref, _ref1, _z0;
        _ref = getXYZTranslate($(this.selector)), this._x0 = _ref[0], this._y0 = _ref[1], _z0 = _ref[2];
        _ref1 = this._getPt(e), x = _ref1.x, y = _ref1.y;
        console.log("x= " + x + "\ty = " + y);
        if (x < this._x_sence) {
          this._direction = "from-left";
        } else if (window.innerWidth - x < this._x_sence) {
          this._direction = "from-right";
        } else if (y < this._y_sence) {
          this._direction = "from-top";
        } else if (window.innerHeight - y < this._y_sence) {
          this._direction = "from-bottom";
        } else {
          this._direction = null;
          this._isMoving = false;
        }
        console.log("sm = " + this._direction);
        if (this._direction) {
          if (this.pubsub) {
            this.pubsub.trigger("start-move:" + this.name, [this._x0, this._y0]);
          }
          $(this.selector).animate({
            translate3d: "" + this._x0 + "px, " + this._y0 + "px, 0"
          }, 0);
          this._time = Date.now();
          w0 = window.innerWidth;
          this._width = $(this.selector).offset().width;
          return this._w0 = this._width - w0;
        }
      };

      SmartMove.prototype._onMove = function(dx, dy) {
        var x, x_max, x_min, y, y_max, y_min, _ref, _ref1;
        if ((_ref = this._direction) === "from-left" || _ref === "from-right") {
          this._dx = -dx;
          x = this._x0 + this._dx;
          if (this._direction === "from-left") {
            x_max = parseInt(this._maxLeftOffset * window.innerWidth);
            if (!(x <= x_max)) {
              x = x_max;
            }
          } else {
            x_min = parseInt((this._maxRightOffset - 1) * window.innerWidth);
            if (!(x >= x_min)) {
              x = x_min;
            }
          }
          if (this.pubsub) {
            this.pubsub.trigger("move:" + this.name, [this._dx, this._dy]);
          }
          return $(this.selector).animate({
            translate3d: "" + x + "px, " + this._y0 + "px, 0"
          }, 0);
        } else if ((_ref1 = this._direction) === "from-top" || _ref1 === "from-bottom") {
          this._dy = -dy;
          y = this._y0 + this._dy;
          if (this._direction === "from-top") {
            y_max = parseInt(this._maxTopOffset * window.innerHeight);
            if (!(y <= y_max)) {
              y = y_max;
            }
          } else {
            y_min = parseInt((this._maxBottomOffset - 1) * window.innerHeight);
            if (!(y >= y_min)) {
              y = y_min;
            }
          }
          if (this.pubsub) {
            this.pubsub.trigger("move:" + this.name, [this._dx, this._dy]);
          }
          return $(this.selector).animate({
            translate3d: "" + this._x0 + "px, " + y + "px, 0"
          }, 0);
        }
      };

      SmartMove.prototype._onStopMove = function() {
        var now, x, y, z, _ref, _ref1, _ref2;
        this._isMoving = false;
        now = Date.now();
        _ref = getXYZTranslate($(this.selector)), x = _ref[0], y = _ref[1], z = _ref[2];
        if (((_ref1 = this._direction) === "from-left" || _ref1 === "from-right") && this._dx !== 0) {
          if (x > 0) {
            x = 0;
          } else if (x < -this._w0) {
            x = -this._w0;
          } else {
            x = 0;
          }
          if (this.pubsub) {
            this.pubsub.trigger("stop-move:" + this.name, [this._dx, this._dy]);
          }
          y = this._y0;
        } else if ((_ref2 = this._direction) === "from-top" || _ref2 === "from-bottom") {
          if (y > 0) {
            y = 0;
          } else if (y < -window.innerHeight) {
            y = -window.innerHeight;
          } else {
            y = 0;
            if (this.pubsub) {
              this.pubsub.trigger("stop-move:" + this.name, [this._dx, this._dy]);
            }
          }
        }
        if (!this._stopCondition(this._dx, this._dy)) {
          $(this.selector).animate({
            translate3d: "" + x + "px, " + this._y0 + "px, 0"
          }, this._animTime, "ease-out");
        }
        this._dx = this._dy = 0;
        return SmartMove.__super__._onStopMove.call(this);
      };

      return SmartMove;

    })(FreeMove);
    DegTouch = (function(_super) {
      __extends(DegTouch, _super);

      function DegTouch(selector, opts) {
        this.selector = selector;
        this.deg0 = 0;
        this.w = 0.75 * window.innerWidth;
        this.cube = opts.cube || this.selector;
        this._time = opts.time || 500;
        this._parentElem = opts.parent || this.selector;
        this._sideSelector = opts.sideSelector;
        DegTouch.__super__.constructor.call(this, this.selector, opts);
      }

      DegTouch.prototype._resizeParent = function() {
        var deg, el_shift, ind;
        el_shift = [270, 0, 90, 180];
        deg = this.deg0;
        while (deg < 0) {
          deg += 90;
        }
        return ind = 1 + el_shift.indexOf(deg % 360);
      };

      DegTouch.prototype.rotate = function(direction) {
        switch (direction) {
          case "left":
            this.deg0 -= 90;
            break;
          case "right":
            this.deg0 += 90;
        }
        return $(this.cube).animate({
          "rotateY": "" + this.deg0 + "deg"
        }, this._time, "ease", (function(_this) {
          return function() {
            return _this._resizeParent();
          };
        })(this));
      };

      DegTouch.prototype.move = function(deg, opts) {
        var time;
        if (opts == null) {
          opts = {};
        }
        time = opts.time || this._time;
        if (opts.replace) {
          this.deg0 = deg;
        }
        return $(this.cube).animate({
          "rotateY": "" + deg + "deg"
        }, time, "ease", (function(_this) {
          return function() {
            return _this._resizeParent();
          };
        })(this));
      };

      return DegTouch;

    })(Touchable);
    getXYZTranslate = function(elem) {
      var match2d, match3d, matchX, matchY, transformValue, x, y, z, _ref, _ref1;
      elem = $(elem).get(0);
      if (!elem.style[CSS3Transform]) {
        elem.style[CSS3Transform] = "";
        return [0, 0, 0];
      }
      transformValue = elem.style[CSS3Transform];
      match3d = transformValue.match(/translate3d\s{0,}\(\s{0,}\-?\d+(|\.\d+)px\s{0,},\s{0,}\-?\d+(|\.\d+)px\s{0,},\s{0,}\-?\d+(|\.\d+)px\s{0,}\)/ig);
      if (match3d) {
        _ref = match3d[0].replace(/\s|px/g, "").match(/\([^\)]+\)/g)[0].slice(1, -1).split(","), x = _ref[0], y = _ref[1], z = _ref[2];
        return [parseFloat(x), parseFloat(y), parseFloat(z)];
      } else {
        match2d = transformValue.match(/translate\s{0,}\(\s{0,}\-?\d+(|\.\d+)px\s{0,},\s{0,}\-?\d+(|\.\d+)px\s{0,}\)/ig);
        if (match2d) {
          _ref1 = match2d[0].replace(/\s|px/g, "").match(/\([^\)]+\)/g)[0].slice(1, -1).split(","), x = _ref1[0], y = _ref1[1];
          return [parseFloat(x), parseFloat(y), 0];
        } else {
          x = 0;
          y = 0;
          matchX = transformValue.match(/translateX\(\d+(|\.\d+)px\)/ig);
          if (matchX) {
            x = parseFloat(matchX[0].replace(/\s|px/g, "").match(/\([^\)]+\)/g)[0].slice(1, -1));
          } else {
            matchY = transformValue.match(/translateY\(\d+(|\.\d+)px\)/ig[0]);
            y = parseFloat(matchY[0].replace(/px/g, "").match(/\([^\)]+\)/g)[0].slice(1, -1));
          }
          return [x, y, 0];
        }
      }
    };
    Updater = (function() {
      function Updater(elem, delta) {
        this.elem = elem;
        this.delta = delta != null ? delta : 50;
        this._lastUpdate = 1;
      }

      Updater.prototype.updateContent = function(html) {
        var now;
        now = Date.now();
        if (now - this._lastUpdate > this.delta) {
          this._lastUpdate = now;
          return $(this.elem).html(html);
        }
      };

      Updater.prototype.show = function() {
        return $(this.elem).show();
      };

      Updater.prototype.hide = function() {
        return $(this.elem).hide();
      };

      Updater.prototype.showParent = function() {
        return $(this.elem).parent().show();
      };

      Updater.prototype.hideParent = function() {
        return $(this.elem).parent().hide();
      };

      return Updater;

    })();
    HorizontalSlidingContent = (function(_super) {
      __extends(HorizontalSlidingContent, _super);

      function HorizontalSlidingContent(selector, opts) {
        this.selector = selector;
        if (opts == null) {
          opts = {};
        }
        HorizontalSlidingContent.__super__.constructor.call(this, selector, opts);
        this._lockLeft = !!opts.lockLeft;
        this._lockRight = !!opts.lockRight;
        this._maxScreenWidth = opts.maxWidth || null;
        this._moveGain = opts.moveGain || 1;
        this._animTime = 320;
        this._inertiaTime = opts.inertiaTime || this._animTime;
        this._moveFixed = $(this.selector).data("move-fixed") === "yes";
        if (this._moveFixed) {
          this._moveFixedValue = parseFloat($(this.selector).data("move-fixed-value") || "1.0") * window.innerWidth;
        } else {
          this._moveFixedValue = opts.fixedValue || 50;
        }
      }

      HorizontalSlidingContent.prototype._prepareForSliding = function() {
        var w0, _ref, _z0;
        _ref = getXYZTranslate($(this.selector)), this._x0 = _ref[0], this._y0 = _ref[1], _z0 = _ref[2];
        w0 = this._maxScreenWidth ? this._maxScreenWidth : window.innerWidth;
        this._width = $(this.selector).offset().width;
        this._w0 = this._width - w0;
        return $(this.selector).animate({
          translate3d: "" + this._x0 + "px, " + this._y0 + "px, 0"
        }, 0);
      };

      HorizontalSlidingContent.prototype.doSlideLeft = function() {
        var x;
        this._prepareForSliding();
        x = this._x0 + this._moveFixedValue;
        if (x > 0) {
          x = -this._width + this._moveFixedValue;
        }
        return $(this.selector).animate({
          translate3d: "" + x + "px, " + this._y0 + "px, 0"
        }, this._animTime, "ease-out");
      };

      HorizontalSlidingContent.prototype.doSlideRight = function() {
        var w, x;
        this._prepareForSliding();
        x = this._x0 - this._moveFixedValue;
        w = -(this._width - this._moveFixedValue);
        if (x <= -this._width + this._moveFixedValue) {
          x = 0;
        }
        return $(this.selector).animate({
          translate3d: "" + x + "px, " + this._y0 + "px, 0"
        }, this._animTime, "ease-out");
      };

      HorizontalSlidingContent.prototype._onStartMove = function(e) {
        var w0, _ref, _z0;
        this._locked = $(this.selector).data("lock") === "yes";
        if (!this._locked) {
          this._locked = $(e.currentTarget).data("lock") === "yes";
        }
        this._dx = this._dy = 0;
        this._isMoving = true;
        if (!this._locked) {
          _ref = getXYZTranslate($(this.selector)), this._x0 = _ref[0], this._y0 = _ref[1], _z0 = _ref[2];
          $(this.selector).animate({
            translate3d: "" + this._x0 + "px, " + this._y0 + "px, 0"
          }, 0);
          this._time = Date.now();
          w0 = this._maxScreenWidth ? this._maxScreenWidth : window.innerWidth;
          this._width = $(this.selector).offset().width;
          return this._w0 = this._width - w0;
        }
      };

      HorizontalSlidingContent.prototype._onMove = function(dx, dy) {
        var x;
        if (!this._locked) {
          this._dx = -dx;
          x = this._x0 + this._dx;
          if ((this._lockLeft && x > 0) || (this._lockRight && x < -this._width)) {
            return;
          }
          return $(this.selector).animate({
            translate3d: "" + (round(x)) + "px, " + this._y0 + "px, 0"
          }, 0);
        }
      };

      HorizontalSlidingContent.prototype._onStopMove = function() {
        var deltaOff, deltaTime, now, sign, x, y, z, _ref;
        this._isMoving = false;
        if (!this._locked && this._dx !== 0) {
          now = Date.now();
          _ref = getXYZTranslate($(this.selector)), x = _ref[0], y = _ref[1], z = _ref[2];
          if (x > 0) {
            x = 0;
          } else if (x < -this._w0) {
            x = -this._w0;
          } else {
            deltaTime = now - this._time;
            if (this._moveFixed) {
              sign = 1;
              if (deltaTime < this._inertiaTime) {
                if (this._dx > 0) {
                  x = this._x0 + sign * this._moveFixedValue;
                } else {
                  x = this._x0 - sign * this._moveFixedValue;
                }
              } else {
                if (abs(this._dx) > this._moveFixedValue / 2) {
                  x = this._x0 - this._moveFixedValue;
                } else {
                  x = this._x0 + this._moveFixedValue;
                }
              }
            } else {
              if (deltaTime < this._inertiaTime) {
                deltaOff = this._dx / (deltaTime / this._inertiaTime);
                x = this._x0 + this._dx + deltaOff * this._moveGain;
              }
            }
            if (x > 0) {
              x = 0;
            } else if (x < -this._w0) {
              x = -this._w0;
            }
          }
          x = round(x);
          $(this.selector).animate({
            translate3d: "" + x + "px, " + this._y0 + "px, 0"
          }, this._animTime, "ease-out");
          return this._dx = this._dy = 0;
        }
      };

      return HorizontalSlidingContent;

    })(Touchable);
    SlidingContent = (function(_super) {
      __extends(SlidingContent, _super);

      function SlidingContent(selector, opts) {
        var e, k, _i, _len, _ref;
        this.selector = selector;
        if (opts == null) {
          opts = {};
        }
        this.handlers = {};
        _ref = ["checkTouch", "onStartMove", "onStopMove", "onMove"];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          k = _ref[_i];
          if (opts[k] != null) {
            this.handlers[k] = opts[k];
            delete opts[k];
          } else {
            this.handlers[k] = function() {};
          }
        }
        SlidingContent.__super__.constructor.call(this, selector, opts);
        this._maxDy = "number" === typeof opts.maxTopOffset ? opts.maxTopOffset : 200;
        this._height100Selector = opts.h100selector || "body";
        this._lockBottom = !!opts.lockBottom;
        this._lockButtomValue = opts.lockBottomValue || 300;
        this._lockNod = "boolean" === typeof opts.lockNod ? opts.lockNod : false;
        $(window).on("nod", (function(_this) {
          return function(e) {
            var x, y, z, _ref1;
            if (!_this._lockNod) {
              if (!_this._isMoving) {
                _ref1 = getXYZTranslate($(_this.selector)), x = _ref1[0], y = _ref1[1], z = _ref1[2];
                y += 60 * e.detail.value;
                if (y > 0) {
                  return bounceY(_this.selector, -20, 0, [300, 100, 150]);
                } else if (y < -_this._selectorHeight) {
                  return bounceY(_this.selector, 20, -_this._selectorHeight, [300, 100, 150]);
                } else {
                  return $(_this.selector).animate({
                    translate3d: "0, " + y + "px, 0"
                  }, 500, "ease-out");
                }
              }
            }
          };
        })(this));
        try {
          this.h100 = round($(this._height100Selector).offset().height);
        } catch (_error) {
          e = _error;
          this.h100 = window.screen.height;
        }
        this._framedClass = opts.framedClass || "framed";
        if ($("body").hasClass(this._framedClass)) {
          if (isIphone && !window.navigator.standalone) {
            this.h100 -= 49;
          }
        }
        $(this.selector).find(".toggle-slide-lock").on("mousedown touchstart", (function(_this) {
          return function(e) {
            var lock;
            e.preventDefault();
            e.stopPropagation();
            lock = "no" === ($(_this.selector).data("lock") || "no") ? "yes" : "no";
            $(_this.selector).data("lock", lock);
            if (lock === "no") {
              return $(_this.selector).animate({
                translate3d: "0, " + (-_this.h100) + "px, 0"
              }, 450, "ease");
            } else {
              return $(_this.selector).animate({
                translate3d: "0, 0, 0"
              }, 450, "ease");
            }
          };
        })(this));
      }

      SlidingContent.prototype._prepareForSliding = function() {
        var _ref, _z0;
        _ref = getXYZTranslate($(this.selector)), this._x0 = _ref[0], this._y0 = _ref[1], _z0 = _ref[2];
        return this._height = $(this.selector).offset().height;
      };

      SlidingContent.prototype.doSlideDown = function() {
        var y;
        this._prepareForSliding();
        y = this._y0 - this.h100;
        console.log("y < -@_height + @h100");
        console.log("" + y + " < " + (-this._height + this.h100));
        if (y < -this._height + this.h100) {
          y = -this._height + this.h100;
        }
        console.log("y0.1 = " + y + " ( -" + this._height + " + " + this.h100);
        return $(this.selector).animate({
          translate3d: "" + this._x0 + "px, " + y + "px, 0"
        }, this._animTime, "ease-out");
      };

      SlidingContent.prototype.doSlideUp = function(toTop) {
        var y;
        if (toTop == null) {
          toTop = false;
        }
        this._prepareForSliding();
        if (toTop) {
          y = 0;
        } else {
          y = this._y0 + this.h100;
          if (y > 0) {
            y = 0;
          }
        }
        return $(this.selector).animate({
          translate3d: "" + this._x0 + "px, " + y + "px, 0"
        }, this._animTime, "ease-out");
      };

      SlidingContent.prototype._onStartMove = function() {
        var _ref, _z0;
        this._locked = $(this.selector).data("lock") === "yes";
        this._isMoving = true;
        if (!this._locked) {
          _ref = getXYZTranslate($(this.selector)), this._x0 = _ref[0], this._y0 = _ref[1], _z0 = _ref[2];
          this._dy = this._dy = 0;
          $(this.selector).animate({
            translate3d: "" + this._x0 + "px, " + this._y0 + "px, 0"
          }, 0);
          this._time = Date.now();
          this._selectorHeight = $(this.selector).offset().height - this.h100;
          this._selectorParentHeight = $(this.selector).parent().offset().height;
          $(this.selector).data("height", this._selectorHeight + this.h100);
          return this.handlers.onStartMove({});
        }
      };

      SlidingContent.prototype._onMove = function(dx, dy) {
        var y;
        if (!this._locked) {
          this._dx = this.pos0.x - this.pos1.x;
          this._dy = -dy;
          y = this._y0 + this._dy;
          if (this._lockButtom) {
            if ((y < -this._selectorHeight) || (y + this._lockButtomValue < -this._selectorHeight)) {
              return;
            }
          }
          if (y > this._maxDy) {
            y = this._maxDy;
          }
          $(this.selector).animate({
            translate3d: "0, " + (round(y)) + "px, 0"
          }, 0);
          return this.handlers.onMove({
            y: y,
            dy: this._dy,
            dx: this._dx
          });
        }
      };

      SlidingContent.prototype._onStopMove = function() {
        var deltaOff, deltaTime, inertiaTime, moveGain, now, x, y, z, _ref;
        console.log("handle stop move");
        this._isMoving = false;
        if (!this._locked) {
          now = Date.now();
          _ref = getXYZTranslate($(this.selector)), x = _ref[0], y = _ref[1], z = _ref[2];
          if (y > 0) {
            this.handlers.onStopMove({
              y: 0,
              dy: this._dy
            });
            return bounceY(this.selector, -20, 0, [300, 100, 150]);
          } else {
            deltaTime = now - this._time;
            inertiaTime = 500;
            moveGain = 1;
            if (deltaTime < 500) {
              deltaOff = this._dy / (deltaTime / inertiaTime);
              y = this._y0 + this._dy + deltaOff * moveGain;
              if (y > 0) {
                y = 0;
              } else if (y < -this._selectorHeight) {
                y = -this._selectorHeight;
              }
            }
            y = round(y);
            if (y > 0) {
              y = 0;
            }
            $(this.selector).animate({
              translate3d: "0, " + y + "px, 0"
            }, 500, "ease-out");
            return this.handlers.onStopMove({
              y: y,
              dy: this._dy
            });
          }
        }
      };

      return SlidingContent;

    })(Touchable);
    t = {
      Touchable: Touchable,
      FreeMove: FreeMove,
      SmartMove: SmartMove,
      WidgetsManager: WidgetsManager,
      BigScreenWidgetsManager: BigScreenWidgetsManager,
      ShiftBillet: ShiftBillet,
      SlidingContent: SlidingContent,
      HorizontalSlidingContent: HorizontalSlidingContent,
      DegTouch: DegTouch,
      Updater: Updater,
      hasTouch: !!('ontouchstart' in window),
      fn: {
        isiOS: function() {
          return isiOS;
        },
        isPortrait: function() {
          if (isiOS && (Math.abs(window.orientation) !== 90)) {
            return true;
          } else {
            return false;
          }
        },
        getXYZTranslate: getXYZTranslate,
        wait: function(time, fn) {
          return setTimeout((function() {
            return fn();
          }), time);
        },
        bounceX: bounceX,
        bounceY: bounceY
      }
    };
    window.T = t;
    return t;
  });

}).call(this);
